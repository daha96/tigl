// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include <CCPACSSkinSegment.h>
#include "CCPACSSkin.h"
#include "CPACSSkinSegments.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSkinSegments::CPACSSkinSegments(CCPACSSkin* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSSkinSegments::~CPACSSkinSegments()
    {
    }

    const CCPACSSkin* CPACSSkinSegments::GetParent() const
    {
        return m_parent;
    }

    CCPACSSkin* CPACSSkinSegments::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSSkinSegments::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSSkinSegments::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSSkinSegments::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSSkinSegments::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSSkinSegments::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element skinSegment
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/skinSegment")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/skinSegment", m_skinSegments, 1, tixi::xsdUnbounded, this, m_uidMgr);
        }

    }

    void CPACSSkinSegments::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element skinSegment
        tixi::TixiSaveElements(tixiHandle, xpath + "/skinSegment", m_skinSegments);

    }

    const std::vector<std::unique_ptr<CCPACSSkinSegment>>& CPACSSkinSegments::GetSkinSegments() const
    {
        return m_skinSegments;
    }

    std::vector<std::unique_ptr<CCPACSSkinSegment>>& CPACSSkinSegments::GetSkinSegments()
    {
        return m_skinSegments;
    }

    CCPACSSkinSegment& CPACSSkinSegments::AddSkinSegment()
    {
        m_skinSegments.push_back(make_unique<CCPACSSkinSegment>(this, m_uidMgr));
        return *m_skinSegments.back();
    }

    void CPACSSkinSegments::RemoveSkinSegment(CCPACSSkinSegment& ref)
    {
        for (std::size_t i = 0; i < m_skinSegments.size(); i++) {
            if (m_skinSegments[i].get() == &ref) {
                m_skinSegments.erase(m_skinSegments.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }


int CPACSSkinSegments::GetSkinSegmentCount() const
{
    return static_cast<int>(m_skinSegments.size());
}

CCPACSSkinSegment& CPACSSkinSegments::GetSkinSegment(int index) const
{
    const int idx = index - 1;
    if (idx < 0 || idx >= GetSkinSegmentCount()) {
        LOG(ERROR) << "Invalid index value";
        throw CTiglError("Invalid index value in CCPACSSkinSegments::GetSkinSegment", TIGL_INDEX_ERROR);
    }
    return (*(m_skinSegments[idx]));
}

CCPACSSkinSegment& CCPACSSkinSegments::GetSkinSegment(const std::string& UID) const
{
    return *m_skinSegments[GetSkinSegmentIndex(UID)-1];
}

int CCPACSSkinSegments::GetSkinSegmentIndex(const std::string& UID) const
{
    for (int i=0; i < GetSkinSegmentCount(); i++) {
        const std::string tmpUID(m_skinSegments[i]->GetUID());
        if (tmpUID == UID) {
            return i+1;
        }
    }

    // UID not there
    throw CTiglError("Invalid UID in CCPACSSkinSegments::GetSkinSegmentIndex", TIGL_UID_ERROR);
}

} // namespace generated
} // namespace tigl
